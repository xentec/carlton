#define DEBUG // enable debug output

#include "bot.nxc"
#include "event.nxc"
#include "log.nxc"
#include "map.nxc"
#include "music.nxc"
#include "table.nxc"
#include "timer.nxc"
#include "vector.nxc"


#download "../data/map.txt"
#download "../data/task.txt"

#define MAP_FILE    "map.txt"
#define TASK_FILE   "task.txt"

#define PORT_TOUCH IN_1
#define PORT_COLOR IN_2


// #########################################

bool isDigit(char c, byte& digit)
{
	if('0' <= c && c <= '9')
	{
		digit = c - '0';
		return true;
	}
	return false;
}

void loadMap(const string& fileName, Bot& bot, Table& table[])
{
	byte handle;
	unsigned int err;
	unsigned int fileSize;

	char cur;
	byte idx;
	Vector v;

	err = OpenFileRead(fileName, fileSize, handle);
	if(err) {
		logFatal("mapOpen", FormatVal("%04X", err));
		return;
	}

	for(int i = 0; i < MAP_SIZE; i++)
	{
		err = Read(handle, cur);
		if(err) {
			logFatal("mapRead", StrCat(FormatVal("%04X", err), " i:", NumToStr(i)));
			break;
		}

		// paint the map
		map[i] = cur;

		switch(cur)
		{
			// set robot starting point
			case MAP_START:
				v.x = i % MAP_STRIDE;
				v.y = -i / MAP_STRIDE;
				bot.begin = v;
				logDebug(StrCat("BOT:", vecToString(v)));
				break;
			default:
		}

		// set table positions
		if(isDigit(cur, idx))
		{
			idx--; // [1;3] -> [0;2] for array access

			Table tbl = table[idx];

			tbl.id = idx+1;

			v.x = i % MAP_STRIDE;
			v.y = -i / MAP_STRIDE;

			if(!ArrayLen(tbl.pos)) {
				// init table array with first position
				ArrayInit(tbl.pos, v, TABLE_LENGTH);
			} else 
			{
				tbl.pos[1] = v;
			}
		
			logDebug(StrCat("TBL", NumToStr(ArrayLen(tbl.pos)), ":", vecToString(v)));
			table[idx] = tbl;
		}
	}
	CloseFile(handle);
}

void loadTasks(const string& fileHandle, byte& tasks[])
{
	byte handle;
	unsigned int err;
	unsigned int fileSize;

	char cur;
	byte idx;
	
	err = OpenFileRead(TASK_FILE, fileSize, handle);
	if(err) {
		logFatal("taskOpen", FormatVal("%04X", err));
	}

	unsigned int taskSize = fileSize/2;
	ArrayInit(tasks, 0, taskSize);

	for(int i = 0; i < fileSize; i++)
	{
		err = Read(handle, cur);
		if(err) {
			logFatal("taskRead", StrCat(FormatVal("%04X", err), " i:", NumToStr(i)));
			break;
		}

		if(cur == 'S')
		{
			logDebug(StrCat("TSK", NumToStr(i/2), ":START"));
			tasks[i/2] = 0;
		}

		// if _cur_ is a digit char, _idx_ becomes that digit
		if(isDigit(cur, idx) &&  0 < idx && idx < 10)
		{
			logDebug(StrCat("TSK", NumToStr(i/2), ":", NumToStr(idx)));
			tasks[i/2] = idx;
		}
	}
}

safecall
void MotorNumOut(int y)
{
	ClearLine(y);
	NumOut(0, y, MotorPower(OUT_A));
//	TextOut(30, y, vecToString(botGetPos(bot))); // causes fatal crash
	NumOut(80, y, MotorPower(OUT_C));
}

safecall
void countDownOut(int val)
{
	ClearLine(LCD_LINE7);
	if(val)
		NumOut(45, LCD_LINE7, val);
}




Bot bot;
Table table[3];
byte tasks[];
Color currentColor;

#define EVENT_GO             0
#define EVENT_BTL_PLACED     1
#define EVENT_BTL_TAKEN      2
#define EVENT_COLOR_CHANGED  3

#define EVENT_AT_TBL1 11
#define EVENT_AT_TBL2 12
#define EVENT_AT_TBL3 13

#define TIMER_TBL_WAIT   0
#define TIMER_TIMEOUT    1



task observer()
{
	SetSensorTouch(PORT_TOUCH);
//	SetSensorColorFull(PORT_COLOR);

	bool bottleIn = false;
//	int colors_raw[4], colors_raw_prev[4];
//	unsigned int dummy[4];
//	int dum;

	while(1)
	{
		if(!bottleIn && Sensor(PORT_TOUCH))
		{
			bottleIn = true;
			eventSet(EVENT_BTL_PLACED);
			eventClear(EVENT_BTL_TAKEN);

			logInfo("Bottle placed");
		} 
		else if(bottleIn && !Sensor(PORT_TOUCH)) 
		{
			bottleIn = false;
			eventSet(EVENT_BTL_TAKEN);
			eventClear(EVENT_BTL_PLACED);

			logInfo("Bottle taken");
		}

/*/
		colors_raw_prev = colors_raw;
		ReadSensorColorEx(PORT_COLOR, dum, dummy, dummy, colors_raw);
		for(int i = 0; i < 4; i++) 
		{
			if(abs(colors_raw_prev[i] - colors_raw[i]) >= COLOR_TOLERANCE)
			{
				currentColor.r = colors_raw[INPUT_RED];
				currentColor.g = colors_raw[INPUT_GREEN];
				currentColor.b = colors_raw[INPUT_BLUE];

				//logInfo("COLOR CHANGED");
//				logInfo(StrCat(NumToStr(colors_raw_prev[INPUT_RED]), "->", NumToStr(colors_raw[INPUT_RED])));
//				logInfo(StrCat(NumToStr(colors_raw_prev[INPUT_GREEN]), "->", NumToStr(colors_raw[INPUT_GREEN])));
//				logInfo(StrCat(NumToStr(colors_raw_prev[INPUT_BLUE]), "->", NumToStr(colors_raw[INPUT_BLUE])));
				//logInfo(colorToString(currentColor));

				eventSet(EVENT_COLOR_CHANGED);
				break;
			}
		}
//*/

		MotorNumOut(LCD_LINE8);

		timerTick();
		Wait(20);
	}
}




task main() 
{
	botInit(bot);

	timerInit(4);
	timerSet(TIMER_TBL_WAIT, 10000, EVENT_GO);
	timerSet(TIMER_TIMEOUT, 3000, EVENT_GO);

	logInfo("Loading map..");
	loadMap(MAP_FILE, bot, table);
//	logLineAppend(NumToStr(ArrayLen(table)));


	logInfo("Loading tasks..");
	loadTasks(TASK_FILE, tasks);
//	logLineAppend(NumToStr(ArrayLen(tasks)));

	logInfo("Running observer");
	start observer;

	logInfo("");
	logInfo("Carlton Banks   ");
	logInfo(" at your service");
	logInfo("");


	botStart(bot);

	Vector goal;
	bool toStart = false;
	for(int i = 0; toStart || i < ArrayLen(tasks); i++)
	{
		PlayTonesEx(pokemonheal);

		if(!toStart && tasks[i] > 0) // tasks[i] == 0 means also "back to start"
		{
			logInfo(StrCat("To table #", NumToStr(tasks[i])));
			goal = tableGetPos(table[tasks[i]-1]);  // [1;3] -> [0;2]
		} else
		{
			logInfo("Back to start");
			goal = bot.begin;
			if(toStart)
				i--; // a toStart operation is usually not in tasks[], so we need to correct _i_
		}

		Vector path[];
		if(botHasPath(bot, goal, path)) // _path_ is filled in botHasPath()
		{
			logInfo("Using saved path");
		} else
		{
			logInfo(StrCat("Looking for path"));
			Astar(bot.pos, goal, path); // _path_ is generated by A*

			if(ArrayLen(path)) 
			{
//				logInfo("Saving path..");
//				botSavePath(bot, goal, path); // sadly doesn't work (yet)
			} else
			{
				logInfo("Path not found!");
				continue;
			}
		}

		logInfo("On my way..");

		botRun(bot, path);

		PlayTonesEx(birthdayparty);


		unsigned long remaining, prev_rmg;
		bool placed = eventIsSet(EVENT_BTL_PLACED);

		// wait normally
		timerStart(TIMER_TBL_WAIT);
		do {
			if(!placed && eventIsSet(EVENT_BTL_PLACED) || placed && eventIsSet(EVENT_BTL_TAKEN))
			{
				// if something happened with the bottles, switch to timeout
				timerCancel(TIMER_TBL_WAIT);
				timerStart(TIMER_TIMEOUT); // .. restart it every time
				placed = !placed;
			}

			// print remaining time on screen
			remaining = timerRemaining(TIMER_TBL_WAIT)/1000;
			if(!remaining)
				remaining = timerRemaining(TIMER_TIMEOUT)/1000;

			if(remaining != prev_rmg)
				countDownOut(remaining);
			prev_rmg = remaining;
			// #########

			Wait(200);
		} while(!eventIsSet(EVENT_GO));
		
		eventClear(EVENT_GO);
		// back to start only when at a table with a bottle loaded
		toStart = !toStart && eventIsSet(EVENT_BTL_PLACED);
	
	}
	StopAllTasks(); // tell observer() to stop
}


