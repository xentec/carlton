//#define DEBUG

#include "bot.nxc"
#include "log.nxc"
#include "map.nxc"
#include "table.nxc"
#include "vector.nxc"


#download "../data/map.txt"
#download "../data/task.txt"

#define MAP_FILE    "map.txt"
#define TASK_FILE   "task.txt"


// #########################################

bool isDigit(char c, byte& digit)
{
	if('0' <= c && c <= '9')
	{
		digit = c - '0';
		return true;
	}
	return false;
}

void loadMap(const string& fileName, Bot& bot, Table& table[])
{
	byte handle;
	byte err;
	unsigned int fileSize;

	char cur;
	byte idx;
	Vector v, p;

	err = OpenFileRead(fileName, fileSize, handle);
	if(err) {
		logFatal("mapOpen", FormatVal("%04X", err));
		return;
	}

	for(int i = 0; i < MAP_SIZE; i++)
	{
		err = Read(handle, cur);
		if(err) {
			logFatal("mapRead", StrCat(FormatVal("%04X", err), " i:", FormatVal("%d", i)));
			break;
		}

		map[i] = cur;
		switch(cur)
		{
			case MAP_START:
				v.x = i % MAP_STRIDE;
				v.y = i / MAP_STRIDE;
				bot.begin = v;
				logDebug(StrCat("BOT:", vecToString(v)));
				break;
			default:
		}

		if(isDigit(cur, idx))
		{
			idx--; // [1;3] -> [0;2]

			Table tbl = table[idx];

			tbl.id = idx+1;

			v.x = i % MAP_STRIDE;
			v.y = i / MAP_STRIDE;

			if(!ArrayLen(tbl.pos)) {
				ArrayInit(tbl.pos, v, TABLE_LENGTH);
			} else 
			{
				tbl.pos[1] = v;
			}
		
			logDebug(StrCat("TBL", FormatVal("%d",ArrayLen(tbl.pos)), ":", vecToString(v)));
			table[idx] = tbl;
		}
	}
	CloseFile(handle);
}

void loadTasks(const string& fileHandle, int& tasks[])
{
	byte handle;
	byte err;
	unsigned int fileSize;
	unsigned int taskSize;

	char cur;
	byte idx;
	
	err = OpenFileRead(TASK_FILE, fileSize, handle);
	if(err) {
		logFatal("taskOpen", FormatVal("%04X", err));
	}

	taskSize = fileSize/2;
	ArrayBuild(tasks, 0, taskSize);

	for(int i = 0; i<fileSize; i++)
	{
		err = Read(handle, cur);
		if(err)
			break;

		if(isDigit(cur, idx) &&  0 < idx && idx < 10) 
		{
			logDebug(StrCat("TSK", FormatVal("%d", i/2), ":", FormatVal("%d", idx)));
			tasks[i/2] = idx;
		}
	}
}

Bot bot;
Table table[3];
byte tasks[];

task main() 
{
	botInit(bot);

	logInfo("Lade Karte..");
	loadMap(MAP_FILE, bot, table);

	logInfo("Lade Aufgaben..");
	loadTasks(TASK_FILE, tasks);

	logWait("Carlton bereit!");


	botStart(bot);

	for(int i = 0; i < ArrayLen(tasks); i++)
	{
		logInfo(StrCat("Fahre zu Tisch ", FormatVal("%d", tasks[i])));
		Vector goal = tableGetPos(table[tasks[i]-1]);  // [1;3] -> [0;2]

		Vector path[];
		if(botHasPath(bot, bot.pos, goal, path)) 
		{
			logInfo("Use saved path");
		} else
		{
			logInfo(StrCat("Suche Pfad.."));
			Astar(bot.pos, goal, path);

			if(ArrayLen(path)) 
			{
				logInfo("Saving path..");
				botSavePath(bot, bot.pos, goal, path);
			} else
			{
				logInfo("Path not found!");
			}
		}

		logInfo("Fahre los");

		botRun(bot, path);

		logDebug(StrCat("Bot: ", vecToString(bot.pos)));
		logWait("Angekommen!");
	}
}


