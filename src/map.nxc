#ifndef MAP_INC
#define MAP_INC

#include "log.nxc"
#include "vector.nxc"


#define MAP_STRIDE  14
#define MAP_SIZE    MAP_STRIDE*MAP_STRIDE
#define MAP_CELL_CM 250 // 250 mm 

#define MAP_STRIDE_WB MAP_STRIDE-2
#define MAP_SIZE_WB MAP_STRIDE_WB*MAP_STRIDE_WB

#define MAP_FREE   ' '
#define MAP_WALL   '#'
#define MAP_START  'S'
#define MAP_BOT    'B'
#define MAP_ERR    '?'

static char map[MAP_SIZE];

char mapGetCell(Vector pos)
{
	// normaly y would increase in the buttom direction of the map
	// but since we want operate in a normal cartesian grid, a invertion is necessary
	pos.y = -pos.y;
	if(-1 < pos.y && pos.y < MAP_STRIDE  &&  -1 < pos.x && pos.x < MAP_STRIDE)
		return map[pos.y * MAP_STRIDE + pos.x];
	else {
		logError("getCell", vecToString(pos));
		return MAP_ERR;
	}
}

void mapSetCell(Vector pos, char data)
{
	pos.y = -pos.y;
	if(-1 < pos.y && pos.y < MAP_STRIDE  &&  -1 < pos.x && pos.x < MAP_STRIDE)
		map[pos.y * MAP_STRIDE + pos.x] = data;
	else{
		logError("setCell", vecToString(pos));
	}
}


inline
bool mapIsObstacle(char c)
{
	return c == MAP_WALL;
}

inline
char mapGetCellCost(char c)
{
	// tables are costly
	if('0' < c && c < '9'+1)
		return 100;

	return 1;
}

#endif // MAP_INC