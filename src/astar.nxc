#pragma once

#include "log.nxc"

#include "map.nxc"
#include "queue.nxc"
#include "vector.nxc"

int getCost(const int& arr[], const Vector& v)
{
	int y = -v.y;
	if(-1 < y && y < MAP_STRIDE  &&  -1 < v.x && v.x < MAP_STRIDE)
		return arr[y * MAP_STRIDE + v.x];
	else {
		logFatal("getCost", vecToString(v));
		return -1;
	}
}

void setCost(int& arr[], const Vector& v, int data)
{
	int y = -v.y;
	if(-1 < y && y < MAP_STRIDE  &&  -1 < v.x && v.x < MAP_STRIDE)
		arr[y * MAP_STRIDE + v.x] = data;
	else
		logFatal("setCost", vecToString(v));
}

Vector getStep(const Vector& arr[], const Vector& v)
{
	int y = -v.y;
	if(-1 < y && y < MAP_STRIDE  &&  -1 < v.x && v.x < MAP_STRIDE)
		return arr[y * MAP_STRIDE + v.x];
	else {
		logFatal("getStep", vecToString(v));
		return vecNULL;
	}
}

void setStep(Vector& arr[], const Vector& v, const Vector& data)
{
	int y = -v.y;
	if(-1 < y && y < MAP_STRIDE  &&  -1 < v.x && v.x < MAP_STRIDE) {
		arr[y * MAP_STRIDE + v.x] = data;
	} else {
		logFatal("setStep", vecToString(v));
	}
}

void pathReverse(Vector& path[], unsigned int begin = NA, unsigned int length = NA)
{
	Vector swapTmp;
	for(int b = begin != NA ? begin : 0, 
		    e = length != NA ? b+length-1: ArrayLen(path)-1; 
		    b < e; b++, e--) 
	{
		swapTmp = path[b];
		path[b] = path[e];
		path[e] = swapTmp;
	}
}

bool pathIsClear(const Vector& begin, const Vector& end)
{
	Vector path = vecSub(end, begin);

	// this function is not for straight vectors
	if(path.x == 0 || path.y == 0)
		return true;

	int incX = sign(path.x);
	int incY = sign(path.y);

	for(int x = begin.x; x != end.x; x += incX)
	{
		for(int y = begin.y; y != end.y; y += incY)
		{
			if(mapIsObstacle(mapGetCell(vecAdd(begin, vecNew(x,y)))))
				return false;
		}
	}

	return true;
}


int heuristic(const Vector& goal, const Vector& next)
{
	return abs(goal.x-next.x)+abs(goal.y-next.y);
}

int Astar(const Vector& startPos, const Vector& goal, Vector& path[], int diagonal = false)
{
	Vector  steps[];
	int     costs[];
	Queue   pq;

	Vector current;
	bool found = false;
	char goalCell = mapGetCell(goal);

	ArrayInit(steps, 0, MAP_SIZE);
	ArrayInit(costs, 0, MAP_SIZE);
	queueInit(pq, MAP_SIZE);

	// start with priority, with no way back and with no cost
	queuePush(pq, 0, startPos);
	setStep(steps, startPos, vecNULL);
	setCost(costs, startPos, 0);

	// look for the unknown
	while(queueSize(pq)) 
	{
		current = queuePop(pq);

		// found our goal? then let's make a break
		//if(vecEq(current, goal)) 
		// don't care too much about the location but more about the contents
		if(goalCell == mapGetCell(current))
		{
			logDebug("FOUND");
			found = true;
			break;
		}

		// look in our 4 directions
		for(int i = 0; i < 4; i++)
		{
			Vector next = vecAdd(current, vecDIRS[i]);
			char cell = mapGetCell(next); // look at what's there

			if(mapIsObstacle(cell)) // ignore unpassable nodes
				continue;

			int newCost = getCost(costs, current) + mapGetCellCost(cell);
			int oldCost = getCost(costs, next);

			// go there only if:
			// - it was not visited yet OR
			// - all other ways are (or have become) too expensive
			if(!oldCost || oldCost > newCost)
			{
				int pri = newCost + heuristic(goal, next);

				queuePush(pq, pri, next);
				setStep(steps, next, current);
				setCost(costs, next, newCost);
			}
		}
	}

	// what a disappointment
	if(!found) {
		return 0;
	}

	// maximum possible path lenght is half of a borderless map + half a stride
	int size = (MAP_SIZE + MAP_STRIDE)/2;

	// now time for path construstion through backtracking the steps from goal
	int pIdx = 0;
	Vector tmpPath[];
	ArrayInit(tmpPath, 0, size);

	// ...with a litte optimization
	/*
		We combine vectors in a line and store only significant points.
		By doing so we reduce path[] size and can use the distance between 
		those points for smoother movement.

		+ = step
		##############    ##############
		#   +++++++++#    #   +-------+#
		## ++#######+# -> ## ++#######|#
		#G++   # S+++#    #G-+   # S--+#
		##############    ##############
	*/
	Vector ahead = vecNULL;
	tmpPath[pIdx] = goal;
	current = goal;

	while(!vecEq(ahead, startPos))
	{
		ahead = getStep(steps, current);

		if(ahead.x != tmpPath[pIdx].x && ahead.y != tmpPath[pIdx].y) 
		{
			pIdx++;
			tmpPath[pIdx] = current;
		}

		current = ahead;
	}

	if(diagonal) // overkill
	{
	/*
		+ = step
		##############    ############## 
		#  ++----+   #    #   +----+   # 
		##++ ####++  # -> ## / #### \  # 
		#G+    #  +-S#    #G+    #   +S# 
		##############    ############## 
	*/
		int ahead = 0;
		int behind = 0;
		while(ahead < pIdx)
		{
			while(pathIsClear(tmpPath[behind], tmpPath[ahead]))
			{
				ahead++;
			}
			tmpPath[behind] = tmpPath[ahead-1];
			behind++;
		}
		pIdx = behind;
	}

	// reverse the reversed path
	size = pIdx+1;
	ArrayInit(path, 0, size);

	for(int i = 0; i < size; i++)
		path[i] = tmpPath[pIdx-i];

	// clean up (?)
	ArrayInit(steps, 0, 0);
	ArrayInit(costs, 0, 0);
	queueDestroy(pq);


	return size;
}