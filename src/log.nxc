#ifndef LOG_INC
#define LOG_INC

#define LOG_FIRST_LINE 6
#define SYMBOL_HEIGHT LCD_LINE7


#ifdef DEBUG
	#define logDebug(str) logLine(str)
#else
	#define logDebug(str)
#endif


static string _logLines[LOG_FIRST_LINE];
static int _logLineNum = 0;

safecall
void logLine(const string& line)
{
	for(int i = _logLineNum; i > 0; i--)
	{
		_logLines[i] = _logLines[i-1];
	}

	_logLines[0] = line;

	int l;
	for(int i = 0; i < LOG_FIRST_LINE; i++) 
	{
		l = (8-LOG_FIRST_LINE + i)*SYMBOL_HEIGHT;
		ClearLine(l);
		TextOut(0, l, _logLines[i]);
	}

	if(_logLineNum < LOG_FIRST_LINE-1)
		_logLineNum++;
}

safecall
void logLineAppend(const string& msg)
{
	_logLines[0] = StrCat(_logLines[0], msg);
	TextOut(0, (8-LOG_FIRST_LINE)*SYMBOL_HEIGHT, _logLines[0]);
}

void logClear(int num = LOG_FIRST_LINE)
{
	while(num--)
		logLine("");
}

void logWait(const string& msg)
{
	logLine(msg);
	until(ButtonCount(BTNCENTER, true));
}

inline
void logInfo(const string& msg)
{
	logLine(msg);
}

inline
void logError(const string& head, const string& msg)
{
	logLine(StrCat("ERR:", head));
	logWait(msg);
}

void logFatal(const string& head, const string& msg)
{
	logLine(StrCat("HLT:", head));
	logLine(msg);
	while(1) {}
}



#endif // LOG_INC
