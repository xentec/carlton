#ifndef QUEUE_INC
#define QUEUE_INC

#include "vector.nxc"


/*
	PriorityQueue (implemented with binary heap)

	lower priority value means higher cance of getting out sooner
*/


typedef Vector QueueData; // a simple form of templates would be nice

struct QueueItem
{
	QueueData data;
	int pri;
};

struct Queue
{
	QueueItem list[];
	int count;
	int allocated;
};

void queueInit(Queue& q, int size)
{
	ArrayInit(q.list, NULL, size);
	q.count = 1;
	q.allocated = size;
}

inline
int queueSize(Queue& q)
{
	return q.count - 1;
}

inline 
int queueCapacity(Queue& q)
{
	return q.allocated - 1;
}

void queueResize(Queue& q, int new_size)
{
	QueueItem newList[];

	ArrayInit(newList, NULL, new_size);

	for(int i = 1; i < q.count; i++)
		newList[i] = q.list[i];

	ArrayInit(q.list, NULL, 0);

	q.allocated = new_size;
	q.list = newList;
}

void queuePush(Queue& q, int pri, QueueData& data)
{
	int parent;
	int idx;

	if(q.count == q.allocated) {
		return;
	}

	idx = q.count++; // intended

	while (1) 
	{
		parent = idx >> 1; // [.....p....i]; [..p..i.....]

		// Swap parent and child nodes until we've found 
		// our place in the heap: parent < data < childs

		if(!parent || q.list[parent].pri < pri) // [.....<.....]; [..<..i.....]
			break;

		q.list[idx] = q.list[parent]; // [.....^....v]; [..^..v.....]
		idx = parent;
	}

	q.list[idx].data = data;
	q.list[idx].pri = pri;
}

QueueData queuePop(Queue& q)
{
	QueueData res;
	res = q.list[1].data; // the result is always the highest in the heap

	q.count--;

	// now we need to reorder everything
	int idx = 1, parent;
	while (1) {
		parent = idx * 2;

		if(parent > q.count)
			break;

		if (parent + 1 < q.count && q.list[parent].pri > q.list[parent + 1].pri) 
			parent++;

		// looks like the heap is ordered
		if (q.list[q.count].pri <= q.list[parent].pri) 
			break;

		q.list[idx] = q.list[parent];
		idx = parent;
	}

	q.list[idx] = q.list[q.count];
	q.list[q.count] = 0;
	return res;
}

QueueData queueTop(Queue& q)
{
  return q.list[1].data;
}

void queueDestroy(Queue& q)
{
	ArrayInit(q.list, NULL, 0);
}

#endif
