#ifndef VECTOR_INC
#define VECTOR_INC

#include "log.nxc"

#define VEC_TYPE int

struct Vector 
{
	VEC_TYPE x,y;
};

static const Vector vecNULL = {0, 0};
static const Vector vecDIRS[] = { {1, 0}, {0, 1}, {-1, 0}, {0, -1} };

#define vecRIGHT vecDIRS[0]
#define vecUP vecDIRS[1]
#define vecLEFT vecDIRS[2]
#define vecDOWN vecDIRS[3]

inline
int round(float f)
{
	return trunc(frac(f) < 0.5 ? floor(f) : ceil(f));
}

inline
Vector vecNew(VEC_TYPE x, VEC_TYPE y)
{
	Vector v;
	v.x = x;
	v.y = y;
	return v;
}


string vecToString(const Vector& v)
{
	return StrCat(NumToStr(v.x), ";", NumToStr(v.y));
}

string vecToStringP(const Vector& v)
{
	return StrCat("{", vecToString(v),"}");
}

inline
int vecLengthSquared(const Vector& v)
{
	return v.x*v.x + v.y*v.y;
}

float vecLength(const Vector& v)
{
	if(v.x == 0)
		return v.y;
	if(v.y == 0)
		return v.x;

	logError("vecLen", StrCat("diagonal: ", vecToString(v)));

	return sqrt(vecLengthSquared(v));
}

inline
bool vecEq(const Vector& a, const Vector& b)
{
	return a.x == b.x && a.y == b.y;
}

int vecCmp(const Vector& a, const Vector& b)
{
	if(vecEq(a,b))
		return 0;
	
	return vecLengthSquared(a) > vecLengthSquared(b) ? -1 : 1;
}

inline
bool vecIsNull(const Vector& v)
{
	return vecEq(v, vecNULL);
}

Vector vecAdd(Vector v, const Vector& b)
{
	v.x += b.x;
	v.y += b.y;
	return v;
}

inline
void vecAddIp(Vector& v, const Vector& b)
{
	v.x += b.x;
	v.y += b.y;
}

Vector vecSub(Vector v, const Vector& b)
{
	v.x -= b.x;
	v.y -= b.y;
	return v;
}

inline
void vecSubIp(Vector& v, const Vector& b)
{
	v.x -= b.x;
	v.y -= b.y;
}

inline
Vector vecMul(Vector v, int b)
{
	v.x *= b;
	v.y *= b;
	return v;
}

inline
Vector vecDiv(Vector v, int b)
{
	v.x /= b;
	v.y /= b;
	return v;
}

Vector vecNorm(const Vector& v)
{
	Vector b = vecDiv(v, round(vecLength(v)));
	return b; // try to inline it, I dare you
}

int vecDot(const Vector& a, const Vector& b)
{
	return a.x*b.x+a.y*b.y;
}

int vecAngle(const Vector& a, const Vector& b)
{
	return round(DEGREES_PER_RADIAN * acos(vecDot(a,b) / (vecLength(a)*vecLength(b))));
}

unsigned int vecHash(const Vector& v)
{
	unsigned int hash = (v.y << 7) || v.x;
	return hash;
}


#endif // VECTOR_INC