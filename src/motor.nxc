
#include "log.nxc"
#include "map.nxc"
#include "vector.nxc"

#define WHEEL_DIAMETER 43.2 // (mm)
#define WHEEL_DISTANCE 115


struct Motor
{
	byte port;
	long prevTick;
	long prevDeg;
	int offset;
};

// lost promise
int motorGetRPM(Motor& motor)
{
	long curTick = CurrentTick(),
		 curDeg = MotorRotationCount(motor.port);

	long dt = curTick - motor.prevTick,
		 dg = curDeg - motor.prevDeg;

	motor.prevTick = curTick;
	motor.prevDeg = curDeg;

	return abs(round(dg * 166.6667 / dt));
}

int motorGetDist(Motor& motor)
{
	return round(WHEEL_DIAMETER * PI * MotorRotationCount(motor.port) / 360.0); // mm
}
// ####

inline
float wheelRotateDistance(byte motor)
{
	return WHEEL_DIAMETER*PI*(MotorRotationCount(motor)/360.0);
}



void Drive(float distance, int power) {
	// [SETTINGS]
	float tolerance = 2; // (mm)
	int corr_power = 20;

	// [VAR]
	float a_dist, c_dist;
	float x_tar = distance+tolerance;
	bool a_fin = false, c_fin = false;

	// acceleration function: p(x) = lg(d) * (d * sin(x * 2*PI / d - 2*PI) +d + power)

	// lg is constant for distance so we calculate it only once per call
	float lg = log10(1.0*distance/MAP_CELL_CM) * 20; // 20 is accel. factor
	int pwr = 0;

	// Drive
	OnFwdSyncEx(OUT_AC, pwr, 0, RESET_ALL); // pwr = 0, so we only reset all data
	while(!a_fin){
		a_dist = wheelRotateDistance(OUT_A);
		c_dist = wheelRotateDistance(OUT_C);
		
		// now figure out the needed power with the afore mentioned sinus function
		pwr = lg * (distance * sin(a_dist/MAP_CELL_CM * 2*PI / (distance/MAP_CELL_CM) - PI/2) +distance) / MAP_CELL_CM + power;
		// .. and clamp it, so our motors won't go crazy
		pwr = clamp(pwr, power, 80);

		OnFwdSyncEx(OUT_AC, pwr, 0, RESET_NONE);

		// when one of the motors finishes the distance, stop
		if(a_dist >= x_tar && c_dist >= x_tar){
			OffEx(OUT_AC,RESET_NONE); a_fin = true;
		}
		Wait(250);
	}
	// get the distance after left wheel roll
	a_dist = wheelRotateDistance(OUT_A);
	c_dist = wheelRotateDistance(OUT_C);

	Wait(250);

	// Drive Correction
	a_fin = false;
	c_fin = false;

	// reverse any target overshots
	OnFwdEx(OUT_A, -corr_power, RESET_NONE);
	OnFwdEx(OUT_C, -corr_power, RESET_NONE);
	while(!a_fin || !c_fin){
		a_dist = wheelRotateDistance(OUT_A);
		c_dist = wheelRotateDistance(OUT_A);
		if(a_dist <= x_tar){
			OffEx(OUT_A,RESET_NONE); a_fin = true;
		}
		if(c_dist <= x_tar){
			OffEx(OUT_C,RESET_NONE); c_fin = true;
		}
	}
	Wait(250);
	a_dist = wheelRotateDistance(OUT_A);
	c_dist = wheelRotateDistance(OUT_C);

	// [RESET]
	OffEx(OUT_AC,RESET_ALL);
}


void Rotate(int deg,int power){
	// [SETTINGS]
	int tolerance = 1;
	int corr_power = clamp(power, 30, 50);
	float wheel_distance = 115; // mm

	// [VAR]
	long a_tac = 0, c_tac = 0;
	bool a_fin = false, c_fin = false;
	long x_tar = (RADIANS_PER_DEGREE * deg * wheel_distance)/2.0 / (MOTOR_WHEEL_DIA*PI) * 360;
	// needed rotation count = (rotation curve length)/(number of wheels) / (wheel circumference) in degrees


	//RotateMotorEx(OUT_AC,power,sign(deg)*x_tar,-sign(deg)*100,true,true);
	//return;

	if(!deg)
		return;

	/*
		Pretty much the same game as in Drive()
		rotate until x_tac > x_tar then correct
	*/
	// Rotate
	if(deg > 0){
		OnFwdEx(OUT_A, power, RESET_ALL);
		OnFwdEx(OUT_C, -power, RESET_ALL);
		while(!a_fin || !c_fin){
			a_tac = MotorRotationCount(OUT_A);
			c_tac = -MotorRotationCount(OUT_C);
			if(a_tac >= x_tar+tolerance && !a_fin){
				OffEx(OUT_A,RESET_NONE); a_fin = true;
			}
			if(c_tac >= x_tar+tolerance && !c_fin){
				OffEx(OUT_C,RESET_NONE); c_fin = true;
			}
			Wait(250);
		}
		a_tac = MotorRotationCount(OUT_A);
		c_tac = -MotorRotationCount(OUT_C);
	}else{
		OnFwdEx(OUT_A, -power, RESET_ALL);
		OnFwdEx(OUT_C, power, RESET_ALL);
		while(!a_fin || !c_fin){
			a_tac = MotorRotationCount(OUT_A);
			c_tac = -MotorRotationCount(OUT_C);
			if(a_tac <= x_tar-tolerance && !a_fin){
				OffEx(OUT_A,RESET_NONE); a_fin = true;
			}
			if(c_tac <= x_tar-tolerance && !c_fin){
				OffEx(OUT_C,RESET_NONE); c_fin = true;
			}
			Wait(250);
		}
		a_tac = -MotorRotationCount(OUT_A);
		c_tac = MotorRotationCount(OUT_C);
	}

	// Rotation Correction
	a_fin = a_tac-x_tar == 0;
	c_fin = c_tac-x_tar == 0;

	if(deg > 0){
		OnFwdEx(OUT_A, -corr_power, RESET_NONE);
		OnFwdEx(OUT_C, corr_power, RESET_NONE);
		while(!a_fin || !c_fin){
			a_tac = MotorRotationCount(OUT_A);
			c_tac = -MotorRotationCount(OUT_C);
			if(a_tac <= x_tar+tolerance && !a_fin){
				OffEx(OUT_A,RESET_NONE); a_fin = true;
			}
			if(c_tac <= x_tar+tolerance && !c_fin){
				OffEx(OUT_C,RESET_NONE); c_fin = true;
			}
		}
	}else{
		OnFwdEx(OUT_A, corr_power, RESET_NONE);
		OnFwdEx(OUT_C, -corr_power, RESET_NONE);
		while(!a_fin || !c_fin){
			a_tac = MotorRotationCount(OUT_A);
			c_tac = -MotorRotationCount(OUT_C);
			if(a_tac >= x_tar-tolerance && !a_fin){
				OffEx(OUT_A,RESET_NONE); a_fin = true;
			}
			if(c_tac >= x_tar-tolerance && !c_fin){
				OffEx(OUT_C,RESET_NONE); c_fin = true;
			}
		}
	}

	// [RESET]
	OffEx(OUT_AC,RESET_ALL);
}
