#ifndef TIMER_INC
#define TIMER_INC

#include "event.nxc"
#include "log.nxc"

typedef byte Timer;

struct _tmr {
	Event          event;
	bool           repeating; // +ing, because repeat is a keyword
	unsigned long  dur, end;
};

_tmr timers[];


// safecalls everythere, because fatal crashes are a real nuisance

void timerInit(unsigned int count)
{
	ArrayInit(timers, NULL, count);
}

safecall
void timerSet(Timer t, int duration, Event event, bool repeating = false)
{
	if(t >= ArrayLen(timers)) {
		logError("timerSet", StrCat("over max:", NumToStr(t)));
		return;
	}

	timers[t].dur = duration;
	timers[t].event = event;
	timers[t].repeating = repeating;
}

safecall
void timerStart(Timer t)
{
	if(t >= ArrayLen(timers)) {
		logError("timerStart", StrCat("over max:", NumToStr(t)));
		return;
	}
	timers[t].end = CurrentTick()+timers[t].dur;
}

safecall
void timerCancel(Timer t)
{
	if(t >= ArrayLen(timers)) {
		logError("timerCancel", StrCat("over max:", NumToStr(t)));
		return;
	}
	timers[t].end = 0;
}

safecall
unsigned long timerRemaining(Timer t)
{
	if(t >= ArrayLen(timers)) {
		logError("timerRemain", StrCat("over max:", NumToStr(t)));
		return 0;
	}
	long time = timers[t].end - CurrentTick();
	return  time > 0 ? time : 0;
}

safecall
bool timerIsRunning(Timer t)
{
	return timerRemaining(t) != 0;
}

safecall
void timerTick()
{
	for(int i = 0; i < ArrayLen(timers); i++)
	{
		if(timers[i].end != 0 
		&& timers[i].end <= CurrentTick()) 
		{
			eventSet(timers[i].event);

			if(timers[i].repeating)
				timerStart(i);
			else
				timerCancel(i);
		}
	}
}

task timerTask()
{
	do {
		timerTick();
		Wait(20);
	} while(1);
}

#endif
